# backend/app/services/price_collector.py
import asyncio
import logging
from datetime import datetime
import psycopg2
import os
from backend.app.services.buff_parser import BuffParser

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PriceCollector:
    def __init__(self):
        self.steam_scraper = SteamMarketPrices()
        self.buff_parser = BuffParser()
        self.db_params = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'database': os.getenv('DB_NAME', 'cs2skins'),
            'user': os.getenv('DB_USER'),
            'password': os.getenv('DB_PASSWORD'),
            'port': os.getenv('DB_PORT', '5432')
        }

    async def collect_steam_prices(self, items):
        """Collect prices from Steam Market"""
        for item in items:
            try:
                price_data = await self.steam_scraper.get_item_price(item['market_hash_name'])
                if price_data:
                    await self.store_price(
                        item['item_id'],
                        price_data['lowest_price'],
                        price_data.get('volume', 0),
                        'steam'
                    )
                await asyncio.sleep(1)  # Rate limiting
            except Exception as e:
                logger.error(f"Error collecting Steam price for {item['market_hash_name']}: {e}")

    async def collect_buff_prices(self, items):
        """Collect prices from Buff"""
        for item in items:
            try:
                price_data = await self.buff_parser.get_item_price(item['market_hash_name'])
                if price_data:
                    await self.store_price(
                        item['item_id'],
                        price_data['price'],
                        price_data.get('volume', 0),
                        'buff'
                    )
                await asyncio.sleep(1)  # Rate limiting
            except Exception as e:
                logger.error(f"Error collecting Buff price for {item['market_hash_name']}: {e}")

    async def store_price(self, item_id, price, volume, source):
        """Store price in database"""
        try:
            conn = psycopg2.connect(**self.db_params)
            cur = conn.cursor()
            
            cur.execute("""
                INSERT INTO price_history (item_id, price, volume, source, timestamp)
                VALUES (%s, %s, %s, %s, NOW())
            """, (item_id, price, volume, source))
            
            conn.commit()
            logger.info(f"Stored {source} price for item {item_id}: ${price}")
            
        except Exception as e:
            logger.error(f"Database error storing price: {e}")
        finally:
            if conn:
                cur.close()
                conn.close()

    async def run_collection(self):
        """Main collection routine"""
        try:
            conn = psycopg2.connect(**self.db_params)
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            cur.execute("SELECT item_id, market_hash_name FROM items")
            items = cur.fetchall()
            
            logger.info(f"Starting price collection for {len(items)} items")
            
            # Collect prices from both sources
            await asyncio.gather(
                self.collect_steam_prices(items),
                self.collect_buff_prices(items)
            )
            
            logger.info("Price collection completed")
            
        except Exception as e:
            logger.error(f"Error in price collection: {e}")
        finally:
            if conn:
                cur.close()
                conn.close()

if __name__ == "__main__":
    collector = PriceCollector()
    asyncio.run(collector.run_collection())